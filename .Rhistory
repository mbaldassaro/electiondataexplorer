posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
colnames(table) <- c("1", "2", "3", "4", "5", "6", "7", "8", "9")
table
```{r posterior}
n <- 10  #as n increases
k <- 6   #as k increases
p <- seq(from=0.1, to=0.9, by=0.1)
prior <- c(0.2, 0.3, 0.3, 0.1, 0.01, 0.01, 0.01, 0.01, 0.01)
#likelihood is calculated using the binomial distribution
likelihood <- round(dbinom(k, size=n, prob=p), 5)
#posterior: ways p can produce Dnew x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
colnames(table) <- c("1", "2", "3", "4", "5", "6", "7", "8", "9")
table
barplot(as.matrix(table[2,]), axisnames=T, main="Prior")
barplot(as.matrix(table[3,]), axisnames=T, main="Likelihood")
barplot(as.matrix(table[4,]), axisnames=T, main="Posterior")
n <- 10  #as n increases
k <- 6   #as k increases
p <- seq(from=0.1, to=0.9, by=0.1)
prior <- c(0.2, 0.3, 0.3, 0.1, 0.02, 0.02, 0.02, 0.02, 0.02)
#likelihood is calculated using the binomial distribution
likelihood <- round(dbinom(k, size=n, prob=p), 5)
#posterior: ways p can produce Dnew x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
colnames(table) <- c("1", "2", "3", "4", "5", "6", "7", "8", "9")
table
barplot(as.matrix(table[2,]), axisnames=T, main="Prior")
barplot(as.matrix(table[3,]), axisnames=T, main="Likelihood")
barplot(as.matrix(table[4,]), axisnames=T, main="Posterior")
1/1000
1/1000000
#Bayesian Inference:
#H1 = 0.001
#H2 = 1e-06
#For P: use 0.001 and 1e-06
#Establish Priors: 0.5 and 0.5  #you just don't know the real probability
#Observed Data: k=0, n=10
k <- 0
n <- 10
p=c(0.001, 1e-06)
prior <- c(rep(0.5,2))
#Likelihood calculated using the binomial distribution
a <- factorial(n)
b <- factorial(k)
c <- factorial(n-k)
part1 <- a / (b*c) ; part2 <- p^k; nminusk <- n-k; part3 <- (1-p)^nminusk
likelihood <- part1 * part2 * part3
#likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
#Bayesian Inference:
#H1 = 0.001
#H2 = 1e-06
#For P: use 0.001 and 1e-06
#Establish Priors: 0.5 and 0.5  #you just don't know the real probability
#Observed Data: k=0, n=10
k <- 0
n <- 10
p=c(0.001, 1e-06)
prior <- c(rep(0.5,2))
#Likelihood calculated using the binomial distribution
a <- factorial(n)
b <- factorial(k)
c <- factorial(n-k)
part1 <- a / (b*c) ; part2 <- p^k; nminusk <- n-k; part3 <- (1-p)^nminusk
likelihood <- part1 * part2 * part3
#likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
#update the prior to the posterior and repeat the experiment
k <- 0
n <- 10
p=c(0.001, 1e-06)
prior <- posterior
#Likelihood calculated using the binomial distribution
a <- factorial(n)
b <- factorial(k)
c <- factorial(n-k)
part1 <- a / (b*c) ; part2 <- p^k; nminusk <- n-k; part3 <- (1-p)^nminusk
likelihood <- part1 * part2 * part3
#likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
binom.test(9942,10000,0.993,alternative ="greater") #two.sided or less are alternatives
1/600000000
1/60000000
k <- 3
n <- 413271201
odd <- 1.666667e-09
p <- c(1.666667e-08, odd, 1.66667e-10)
prior <- c(0.25,50,0.25)
#Likelihood calculated using the binomial distribution
a <- factorial(n)
b <- factorial(k)
c <- factorial(n-k)
part1 <- a / (b*c) ; part2 <- p^k; nminusk <- n-k; part3 <- (1-p)^nminusk
likelihood <- part1 * part2 * part3
#likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
k <- 3
n <- 413271201
odd <- 1.666667e-09
p <- c(1.666667e-08, odd, 1.66667e-10)
prior <- c(0.25,50,0.25)
likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
k <- 3
n <- 413271201
p <- seq(from=1e8, to=9e8, by=1e8)
prior <- c(rep(1/9,9))
likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
1/100000000
k <- 3
n <- 413271201
p <- seq(from=1e-08, to=9e-08, by=1e-08)
prior <- c(rep(1/9,9))
likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
1e-08
1/600000000
1/100000000
1/900000000
k <- 3
n <- 413271201
p <- seq(from=1e-08, to=1e-09, by=1e-08)
k <- 3
n <- 413271201
p <- seq(from=1/100000000, to=1/900000000, by=1/100000000)
1/100000000
1/200000000
1/300000000
1/400000000
1/500000000
1/600000000
1/700000000
1/800000000
1/900000000
k <- 3
n <- 413271201
p <- c(1e-08, 5e-09, 3.33333e-09, 2.5e-09, 2e-09, 1.666667e-09, 1.428571e-09, 1.25e-09, 1.111111e-09)
prior <- c(rep(1/9,9))
likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
k <- 3
n <- 413271201
p <- c(1e-08, 5e-09, 3.33333e-09, 2.5e-09, 2e-09, 1.666667e-09, 1.428571e-09, 1.25e-09, 1.111111e-09)
prior <- c(rep(1/9,9))
likelihood <- round(dbinom(k, size=n, prob=p), 5) #alternative
#posterior: ways p can produce prior x likelihood / sum of products
numerator <- prior * likelihood
denominator <- sum(numerator) #sum(prior[1:9]*likelihood[1:9])
posterior <- round(numerator / denominator, 5)
table <- as.data.frame(rbind(p, prior, likelihood, posterior))
table
sum(posterior[1:5])
install.packages("RMySQL")
con <- dbConnect(MySQL(), user="mbaldassaro", password="baldassaro", dbname="albania", host="localhost")
?dbConnect
install.packages("RODBC")
library(RMySQL)
con <- dbConnect(MySQL(), user="mbaldassaro", password="baldassaro", dbname="albania", host="localhost")
dbListTables(albania)
dbListTables(con)
View(bashkia)
class(con)
class(con$bashkia)
View(con$bashkia)
View(con[bashkia])
dbListFields(con, 'bashkia')
rs <- dbSendQuery(mydb, "select * from bashkia")
rs <- dbSendQuery(con, "select * from bashkia")
View(rs)
rs <- as.data.frame(dbSendQuery(con, "select * from bashkia"))
rs <- as.data.frame(rs)
data <- fetch(rs, n=-1)
View(data)
shiny::runApp('Google Drive/ElectionDataExplorer')
head(county)
setwd("~/Google Driver/ElectionDataExplorer/Data")
setwd("~/Google Drive/ElectionDataExplorer/Data")
county <- readRDS("county.rds")
county <- readRDS("counties.rds")
head(county)
save(county, "county.csv")
write.csv(county, "county.csv")
county <- import("county.csv")
county <- read.csv("county.csv")
export(county, "county.rds")
save(county, "county.rds")
install.packages("rio")
library(rio)
export(county, "county.rds")
runApp('~/Google Drive/ElectionDataExplorer')
head(county)
head(counties)
runApp('~/Google Drive/ElectionDataExplorer')
county <- read.csv("county.csv")
head(county)
class(county)
county2 <- county %>% select(-[,2])
county2 <- subset(county, select=-c(X))
head(county2)
export(county2, "county.rds")
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
head(county2)
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
fills <- shades[percents]
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
head(fulldb)
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
runApp('~/Google Drive/ElectionDataExplorer')
head(counties)
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
head(data2)
data(BreastCancer)
?BreastCancer
??BreastCancer
install.packages("mlbench")
library(mlbench)
data("BreastCancer")
data(BreastCancer)
head(BreastCancer)
head(data2)
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
head(counties)
head(data2)
runApp('~/Google Drive/ElectionDataExplorer')
head(BreastCancer)
runApp('~/Google Drive/ElectionDataExplorer')
head(data2)
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
head(data)
head(data2)
runApp('~/Google Drive/ElectionDataExplorer')
head(data2)
data2 <- as.data.frame(data2)
head(data2)
data2 <- data2[,-1]
head(data2)
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
head(counties)
runApp('~/Google Drive/ElectionDataExplorer')
head(counties)
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
runApp('~/Google Drive/ElectionDataExplorer')
install.packages('rsconnect')
install.packages("rsconnect")
setwd("~/..")
setwd("~/Google Drive/")
setwd("~/ElectionDataExplorer")
setwd("ElectionDataExplorer")
library(rsconnect)
rsconnect::setAccountInfo(name='mbaldassaro', token='BD489E421F017F156146000B8CA6EEF7', secret='a4pHnLR0OsCr+PyYNNvNJQsMQNmSC/2hNJMQH3ig')
rsconnect::deployApp()
setwd("~/Google Drive/electiondataexplorer2")
install.packages("choroplethr")
require("maps")
require("mapproj")
source("ui.R")
source("server.R")
source("helpers.R")
plotOutput("map", width="100%")
require("maps")
require("mapproj")
source("ui.R")
source("server.R")
source("helpers.R")
renderPlot("map", width="100%")
require("maps")
require("mapproj")
source("ui.R")
source("server.R")
source("helpers.R")
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent Trump",
"Percent Clinton",
"Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian",
"Percent No HS Diploma",
"Percent HS Diploma",
"Percent Some College",
"Percent College Degree",
"Percent Estimated Poverty",
"Percent Unemployed",
"Percent Home Ownership",
"Percent Multi-Unit Homes"
),
selected = "Percent Trump"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
plotOutput("map", width="100%")
require("maps")
require("mapproj")
source("ui.R")
source("server.R")
source("helpers.R")
plotOutput("map", width="100%")
library(shiny)
runExample()
library(shiny)
runExample("05_sliders")
require("shiny")
#shinyApp(ui=ui.R)
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump")
sliderInput("range", label = "Range of interest:", min = 0, max = 100, value = c(0, 100))
require("shiny")
sliderInput("range", label = "Range of interest:", min = 0, max = 100, value = c(0, 100))
require("shiny")
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump")
require("shiny")
require("shinydashboard")
sliderInput("range", label = "Range of interest:", min = 0, max = 100, value = c(0, 100))
require("shinydashboard")
sliderInput("range", label = "Range of interest:", min = 0, max = 100, value = c(0, 100))
require("shinydashboard")
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
require("shinydashboard")
runExample("05_slider")
require("shinydashboard")
runExample("05_sliders")
require("shinydashboard")
sliderInput("range", label = "Range of interest:", min = 0, max = 100, value = c(0, 100))
inputPanel("n_breaks", label="Select a variable to display", choices=c("Percent Trump", "Percent Clinton", selected="Percent Trump"))
inputPanel("n_breaks", label="Select a variable to display", choices=c("Percent Trump", "Percent Clinton"), selected="Percent Trump")
inputPanel("n_breaks", label="Select a variable to display", choices=c("Percent Trump", "Percent Clinton"), selected="Percent Trump")
inputPanel("n_breaks", label="Select a variable to display", choices=c("Percent Trump", "Percent Clinton"), selected="Percent Trump")
knitr::opts_chunk$set(echo = FALSE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
inputPanel(
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump"),
sliderInput("range", label = "Select a Range",
min = 0, max = 100, value = c(0,100))
)
inputPanel(
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump"),
sliderInput("range", label = "Select a Range",
min = 0, max = 100, value = c(0,100)),
counties <- readRDS("data/county.rds")
shinyServer(function(input, output) {
inputPanel(
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump"),
sliderInput("range", label = "Select a Range",
min = 0, max = 100, value = c(0,100)),
renderPlot("map", width="100%")
)
library(maps)
library(mapproj)
source("ui.R")
source("server.R")
source("helpers.R")
inputPanel(
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump"),
sliderInput("range", label = "Select a Range",
min = 0, max = 100, value = c(0,100)),
renderPlot("map", width="100%")
)
library(maps)
library(mapproj)
source("ui.R")
source("server.R")
source("helpers.R")
inputPanel(
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Percent Trump", "Percent Clinton"), selected = "Percent Trump"),
sliderInput("range", label = "Select a Range",
min = 0, max = 100, value = c(0,100)),
renderPlot("map", width="100%")
)
fluidRow(
column(width=12,
box(
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent Trump",
"Percent Clinton",
"Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian",
"Percent No HS Diploma",
"Percent HS Diploma",
"Percent Some College",
"Percent College Degree",
"Percent Estimated Poverty",
"Percent Unemployed",
"Percent Home Ownership",
"Percent Multi-Unit Homes"
),
selected = "Percent Trump"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
plotOutput("map", width="100%")
))
library(maps)
library(mapproj)
source("electiondataexplorer2/ui.R")
inputPanel(
selectInput("n_breaks", label = "Select a variable to display",
choices = c("Trump", "Clinton"), selected = "Trump"))
inputPanel(
sliderInput("range", label = "Select a Range",
min = 0, max = 100, value = c(0,100))
)
